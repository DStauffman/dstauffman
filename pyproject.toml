[build-system]
requires = ["setuptools>=77.0"]
build-backend = "setuptools.build_meta"

[project]
name = "dstauffman"
version = "3.9.0"
description = "Generic python utilities for Aerospace applications"
readme = "README.rst"
dependencies = ["nubs", "slog"]
requires-python = ">=3.10,<4.0"
authors = [
  {name = "David C. Stauffer", email = "dstauffman@yahoo.com"},
]
maintainers = [
  {name = "David C. Stauffer", email = "dstauffman@yahoo.com"},
]
license = { file = "LICENSE" }
keywords = ["numerical", "analysis", "plotting", "quaternions", "estimation"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Programming Langauge :: Python :: 3.10",
    "Programming Langauge :: Python :: 3.11",
    "Programming Langauge :: Python :: 3.12",
    "Programming Langauge :: Python :: 3.13",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Astronomy",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Scientific/Engineering :: Visualization",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]

[project.optional-dependencies]
# Note: static excludes numba/datashader for mypy type checking (as they don't play well together)
numeric = ["h5py>=3.7", "matplotlib>=3.7", "numpy>=2.0", "pandas>=2.0", "pyarrow>=14.0", "PyQt5>=5.15.11", "pyqt5-sip>=12.11", "pyqt5-qt5>=5.15.2", "qtpy>=2.2", "scipy>=1.10", "tblib>=1.7"]
shader = ["dstauffman[numeric]", "datashader>=0.15", "numba>=0.57"]
spyder = ["spyder-kernels>=2.4"]
static = ["dstauffman[numeric]", "black>=25.0", "flake8>=6.0", "isort>=5.10", "mypy>=1.5", "pycodestyle>=2.10", "pylint>=2.16", "PyQt5-stubs>=5.15"]
test = ["pytest>=7.4", "pytest-cov>=4.0"]

[project.urls]
Repository = "https://github.com/DStauffman/dstauffman"
Issues = "https://github.com/DStauffman/dstauffman/issues"
Changelog = "https://github.com/DStauffman/dstauffman/blob/main/CHANGELOG.md"

[project.scripts]
dcs = "dstauffman.__main__:main"

[tool.setuptools.package-data]
dstauffman = ["CHANGELOG.md", "LICENSE.txt", "pyproject.toml", "README.rst", "*.png", "*.pdf", "*.rst", "*.tex", "*.bat", "*.sh"]

[tool.black]
line-length = 128
target_version = ["py313"]
include = '\.pyi?$'

[tool.coverage.run]
branch = true
omit = ["*/site-packages/*", "*/.eggs/*"]
disable_warnings = ["couldnt-parse"]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",
    # Create platform independent pragmas (potentially have the test runner modify this)
    "pragma: noc unix",
    #"pragma: noc windows",

    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",
    "def _main",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if False:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",

    # Don't complain about typing overloads
    "@overload"
]
ignore_errors = true

[tool.coverage.html]
directory = "coverage_html_report"

[tool.coverage.xml]
output = "coverage_html_report/coverage.xml"

[tool.isort]
py_version = 313
profile = "black"
line_length = 128
combine_as_imports = true
force_sort_within_sections = true
case_sensitive = true
force_alphabetical_sort_within_sections = true
skip_glob = ["__init__.py", "*/__init__.py"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "SLOG", "FIRSTPARTY", "LOCALFOLDER"]
known_slog = ["nubs", "slog"]

[tool.mypy]
show_error_codes       = true
warn_return_any        = true
warn_unused_configs    = true
warn_unreachable       = true
warn_unused_ignores    = true
disallow_untyped_calls = true
disallow_untyped_defs  = true
no_implicit_optional   = true
files                  = [
    "$MYPY_CONFIG_FILE_DIR/dstauffman/**/*.py",
    "$MYPY_CONFIG_FILE_DIR/scripts/*.py"]
mypy_path              = [
    "$MYPY_CONFIG_FILE_DIR/../nubs",
    "$MYPY_CONFIG_FILE_DIR/../slog"]
untyped_calls_exclude  = ["matplotlib"]
#linecount_report       = ".mypy_report"
#any_exprs_report       = ".mypy_report"
#html_report            = ".mypy_report"
#cobertura_xml_report   = ".mypy_report"
#linecoverage_report    = ".mypy_report"
#lineprecision_report   = ".mypy_report"
#xml_report             = ".mypy_report"

[[tool.mypy.overrides]]
module = [
    "coverage.*",
    "datashader.*",
    "h5py.*",
    "keras.*",
    "numba.*",
    "pandas.*",
    "PIL.*",
    "pytest.*",
    "qtpy.*",  # Note would be nice to get rid of this, since PyQt5 is actually stubbed
    "scipy.*",
    "tblib.*",
]
ignore_missing_imports = true

[tool.pylint.messages_control]
max-line-length = 128
disable = ["C0103", "C0301", "C0411", "C0414", "E0401", "E0601", "E0606", "E0611", "E1101", "R0401", "R0402", "R0801", "R0902", "R0903", "R0912", "R0913", "R0914", "R0915", "W0511", "W0702"]
enable = ["I0021"]
ignore-paths = "^(.*[/\\\\]|)tests[/\\\\]test_.*$"

[tool.pydocstyle]
inherit = false
convention = "numpy"
add-ignore = ["D102", "D105", "D204"]

[tool.ruff]
include = ["pyproject.toml", "dstauffman/**/*.py", "scripts/**/*.py"]
line-length = 128
indent-width = 4
target-version = "py313"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "D105",  # missing docstring in magic method
    "D107",  # missing docstring in __init__
    "D203",  # one blank line required before class docstring
    "D212",  # multiline docstring summary should start at the first line
    "D401",  # first line of docstring should be in imperative mood
    "D417",  # temp, fix these
    "E501",  # line too long, (use black to manage this)
    "B007",
    "B010",
    "B018",
    "B023",
    "B026",
    "B028",
    "B030",
    "B905",
    "F841",
    "G001",
    "I001",  # Import block is un-sorted or un-formatted (use isort to manage this)
    "N801",
    "N802",
    "N803",
    "N806",
    "N812",
    "N816",
    "S101",
    "S106",
    "S107",
    "S110",
    "S603",
    "S606",
    "S607",
    "T201",  # `print` found
    "ANN204",
    "ANN401",
    "ARG001",
    "ARG005",
    "ARG002",
    "BLE001",
    "COM812",
    "COM819",
    "DTZ001",
    "DTZ005",
    "DTZ007",
    "EM101",
    "EM102",
    "EM103",
    "ERA001",
    "FBT001",
    "FBT002",
    "FBT003",
    "FIX002",  # line contains TODO
    "FURB105",
    "ICN001",
    "ISC003",
    "PD002",
    "PERF401",
    "PERF403",
    "PIE790",
    "PIE810",
    "PLC0206",
    "PLC0208",
    "PLC0414",
    "PLC0415",
    "PLR0402",
    "PLR0911",
    "PLR0912",
    "PLR0913",
    "PLR0915",
    "PLR1714",
    "PLR1730",
    "PLR2004",
    "PLR5501",
    "PLW0603",
    "PLW1641",
    "PLW2901",
    "PT009",  # Use assert instead of unittest assertEqual
    "PT018",
    "PT027",
    "PYI032",
    "PYI041",
    "PYI050",
    "RET504",
    "RUF001",
    "RUF005",
    "RUF021",
    "RUF028",
    "RUF034",
    "RUF100",
    "SIM102",
    "SIM103",
    "SIM105",
    "SIM108",
    "SIM110",
    "SIM117",
    "SIM118",
    "SIM210",
    "SIM300",
    "SLF001",
    "TC001",
    "TC002",
    "TC003",
    "TD002",  # Missing author in TODO
    "TD003",  # Missing issue link in TODO
    "TD005",
    "TRY002",
    "TRY003",
    "TRY004",
    "TRY203",
    "TRY300",
    "UP004",
    "UP006",
    "UP012",
    "UP015",
    "UP017",
    "UP032",
    "UP034",
    "UP035",
    "UP037",
    "UP043",
    "UP047",
    "YTT204",
]

[tool.ruff.lint.mccabe]
max-complexity = 30

[tool.ruff.lint.per-file-ignores]
"dstauffman/**/__init__.py" = ["F401"]
"dstauffman/tests/*" = ["D102", "D205", "D400", "D415", "N801", "N802", "N806"]
"scripts/*.py" = ["INP001"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"