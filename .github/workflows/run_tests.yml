name: Run Unit Tests via Pytest

on: [push]

env:
  DCS_TESTS_DIR: "${{ github.workspace }}/dstauffman/tests"
  DCS_SHELL_DIR: "${{ github.workspace }}/shell"
  PYTHONPATH: "${{ github.workspace }}/.nubs_repo:${{ github.workspace }}/.slog_repo"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Check out repository
      uses: actions/checkout@v4

    - name: Install uv and set the python version
      uses: astral-sh/setup-uv@v5
      id: setup_python
      with:
        #enable-cache: true
        #cache-local-path: "${{ github.workspace }}/.uv_cache"
        python-version: 3.13

    - name: Set up Python
      run: uv python install
      
    - name: Restore caches
      id: cache-restore
      uses: actions/cache/restore@v4
      with:
        path: |
            .core_only
            .static
            .everything
            .nubs_repo
            .slog_repo
            dstauffman
        key: ${{ runner.os }}-cache

    - name: Install Dependencies for each environment
      run: |
        uv venv .core_only
        ls -la
        source .core_only/bin/activate
        uv pip install coverage[toml] pytest
        deactivate
        
        uv venv .static
        source .static/bin/activate
        uv pip install black coverage flake8 h5py isort matplotlib mypy numpy pandas pylint pylint-exit PyQt5 PyQt5-Stubs pytest pytest-cov qtpy scipy tblib
        deactivate
        
        uv venv .everything
        source .everything/bin/activate
        uv pip install coverage dask[dataframe] datashader h5py matplotlib mypy numba numpy pandas PyQt5 pytest pytest-cov qtpy scipy tblib
        deactivate

    - name: Clone nubs
      uses: actions/checkout@v4
      with:
        repository: DStauffman/nubs
        path: ${{ github.workspace }}/.nubs_repo

    - name: Clone slog
      uses: actions/checkout@v4
      with:
        repository: DStauffman/slog
        path: ${{ github.workspace }}/.slog_repo

    - name: Save caches
      id: cache-save
      uses: actions/cache/save@v4
      with:
        path: |
            .core_only
            .static
            .everything
            .nubs_repo
            .slog_repo
        key: ${{ steps.cache-restore.outputs.cache-primary-key }}

  static:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - name: Restore caches
      id: cache-restore
      uses: actions/cache/restore@v4
      with:
        path: |
            .core_only
            .static
            .everything
            .nubs_repo
            .slog_repo
        key: ${{ runner.os }}-cache

    - name: Mypy static analysis
      continue-on-error: true
      run: |
        pwd
        ls -la
        echo $PYTHONPATH
        source .static/bin/activate
        python --version
        mypy --version
        mypy

    - name: Flake8 static analysis
      continue-on-error: true
      run: |
        pwd
        ls -la
        echo $PYTHONPATH
        source .static/bin/activate
        python --version
        flake8 --version
        flake8 .

    - name: Pylint static analysis
      continue-on-error: true
      run: |
        pwd
        ls -la
        echo $PYTHONPATH
        source .static/bin/activate
        python --version
        pylint --version
        pylint dstauffman || pylint-exit $?
        pylint nubs || pylint-exit $?
        pylint slog || pylint-exit $?
        pylint scripts || pylint-exit $?

    - name: black static analysis
      continue-on-error: true
      run: |
        pwd
        ls -la
        echo $PYTHONPATH
        source .static/bin/activate
        python --version
        black --version
        black . --check

    - name: isort static analysis
      continue-on-error: true
      run: |
        pwd
        ls -la
        echo $PYTHONPATH
        source .static/bin/activate
        isort --version
        isort . --diff

  test:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - name: Restore caches
      id: cache-restore
      uses: actions/cache/restore@v4
      with:
        path: |
            .core_only
            .static
            .everything
            .nubs_repo
            .slog_repo
        key: ${{ runner.os }}-cache

    - name: Test core_only with pytest
      run: |
        pwd
        ls -la
        echo $PYTHONPATH
        source .core_only/bin/activate
        python -m dstauffman tests --coverage --cov_file $DCS_SHELL_DIR/.coverage.core

    - name: Test nubs on core_only
      if: always()
      run: |
        pwd
        ls -la
        echo $PYTHONPATH
        source .core_only/bin/activate
        python -m dstauffman tests --library nubs --coverage --cov_file $DCS_SHELL_DIR/.coverage.nubs_core

    - name: Test slog on core_only
      if: always()
      run: |
        pwd
        ls -la
        echo $PYTHONPATH
        source .core_only/bin/activate
        python -m dstauffman tests --library slog --coverage --cov_file $DCS_SHELL_DIR/.coverage.slog_core

    - name: Test without numba using static
      if: always()
      run: |
        pwd
        ls -la
        echo $PYTHONPATH
        source .static/bin/activate
        python -m dstauffman tests --coverage --cov_file $DCS_SHELL_DIR/.coverage.no_numba

    - name: Test full library with everything
      if: always()
      run: |
        pwd
        ls -la
        echo $PYTHONPATH
        source .everything/bin/activate
        python -m dstauffman tests --coverage --cov_file $DCS_SHELL_DIR/.coverage.full

    - name: Test nubs with everything
      if: always()
      run: |
        pwd
        ls -la
        echo $PYTHONPATH
        source .everything/bin/activate
        python -m dstauffman tests --library nubs --coverage --cov_file $DCS_SHELL_DIR/.coverage.nubs_full

    - name: Run coverage reports
      if: always()
      run: |
        pwd
        ls -la
        export COVERAGE_FILE=$LMS_SHELL_DIR/.coverage.imports
        export COVERAGE_RCFILE=${{ github.workspace }}/pyproject.toml
        export PYTHONPATH=${{ github.workspace }}:$PYTHONPATH
        echo $PYTHONPATH
        source .core_only/bin/activate
        coverage run $LMS_TESTS_DIR/test_commands_help.py
        deactivate
        source .static/bin/activate
        coverage run --append $LMS_TESTS_DIR/test_version.py
        deactivate
        source .everything/bin/activate
        coverage run --append $LMS_TESTS_DIR/test_version.py

    - name: Test core_only with unittest
      if: always()
      run: |
        pwd
        ls -la
        echo $PYTHONPATH
        source .core_only/bin/activate
        python -m dstauffman tests -u

    - name: Test docstrings
      if: always()
      run: |
        pwd
        ls -la
        echo $PYTHONPATH
        source .everything/bin/activate
        python -m dstauffman tests -d

  coverage:
    runs-on: ubuntu-latest
    needs: [build, test]
    steps:
    - name: Restore caches
      id: cache-restore
      uses: actions/cache/restore@v4
      with:
        path: |
            .core_only
            .static
            .everything
            .nubs_repo
            .slog_repo
        key: ${{ runner.os }}-cache

    - name: Make the coverage reports
      run: |
        source .static/bin/activate
        cd $DCS_SHELL_DIR
        pwd
        ls -la
        export COVERAGE_FILE=.coverage
        coverage --version
        coverage combine --keep
        coverage html --rcfile ${{ github.workspace }}/pyproject.toml
        coverage xml --rcfile ${{ github.workspace }}/pyproject.toml
