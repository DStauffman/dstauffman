image: python:latest

# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  DCS_TESTS_DIR: "$CI_PROJECT_DIR/dstauffman/tests"
  DCS_SHELL_DIR: "$CI_PROJECT_DIR/shell"
  QT_QPA_PLATFORM: "offscreen"

# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/reference/pip_install/#caching
#
# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well.
cache:
  paths:
  - .cache/pip
  - static
  - everything
  - core_only
  - poetry

stages:
  - Environments
  - Static Analysis
  - Test
  - Coverage
  - Deploy

make_envs:
  stage: Environments
  script:
  - apt-get update -qq && apt-get install -y -qq libopengl0
  # Create virtual environments
  - python --version
  - pip install --upgrade pip
  - pip install virtualenv
  - virtualenv core_only
  - source core_only/bin/activate
  - python -m pip install --upgrade pip
  - python -m pip install wheel
  - python -m pip install coverage[toml] pytest
  - deactivate
  - virtualenv static
  - source static/bin/activate
  - python -m pip install --upgrade pip
  - python -m pip install wheel
  - python -m pip install black coverage flake8 h5py isort matplotlib mypy numpy pandas pyarrow pylint pylint-exit PyQt5 PyQt5-stubs pytest pytest-cov qtpy scipy tblib
  - deactivate
  - virtualenv everything
  - source everything/bin/activate
  - python -m pip install --upgrade pip
  - python -m pip install wheel
  - python -m pip install coverage datashader h5py matplotlib mypy numba numpy pandas pyarrow PyQt5 pytest pytest-cov qtpy scipy tblib
  - python -m pip install dask[dataframe]  # Fixes missing dask-expr dependency
  - deactivate
  - virtualenv poetry
  - source poetry/bin/activate
  - python -m pip install --upgrade pip
  - python -m pip install wheel
  - python -m pip install poetry
  - python -m pip install twine  # GitLab doesn't fully support poetry for publishing yet, use twine instead
  - deactivate

mypy:
  stage: Static Analysis
  allow_failure: true
  script:
  - pwd
  - ls -l
  - source static/bin/activate
  - python --version
  - mypy --version
  - mypy

flake8:
  stage: Static Analysis
  allow_failure: true
  script:
  - pwd
  - ls -l
  - source static/bin/activate
  - python --version
  - flake8 --version
  - flake8 .

pylint:
  stage: Static Analysis
  allow_failure: true
  script:
  - pwd
  - ls -l
  - source static/bin/activate
  - python --version
  - pylint --version
  - pylint dstauffman || pylint-exit $?
  - pylint nubs || pylint-exit $?
  - pylint slog || pylint-exit $?
  - pylint scripts || pylint-exit $?

black:
  stage: Static Analysis
  allow_failure: true
  script:
  - pwd
  - ls -l
  - source static/bin/activate
  - python --version
  - black --version
  - black . --check

isort:
  stage: Static Analysis
  allow_failure: true
  script:
  - pwd
  - ls -l
  - source static/bin/activate
  - isort --version
  - isort . --diff

core_test:
  stage: Test
  needs: ["make_envs"]
  artifacts:
    paths:
    - $DCS_SHELL_DIR/.coverage.core
    expire_in: 4 hours
  script:
  - pwd
  - ls -l
  - source core_only/bin/activate
  - python -m dstauffman tests --coverage --cov_file $DCS_SHELL_DIR/.coverage.core

nubs_test:
  stage: Test
  needs: ["make_envs"]
  artifacts:
    paths:
    - $DCS_SHELL_DIR/.coverage.nubs_core
    expire_in: 4 hours
  script:
  - pwd
  - ls -l
  - source core_only/bin/activate
  - python -m dstauffman tests --library nubs --coverage --cov_file $DCS_SHELL_DIR/.coverage.nubs_core

slog_test:
  stage: Test
  needs: ["make_envs"]
  artifacts:
    paths:
    - $DCS_SHELL_DIR/.coverage.slog_core
    expire_in: 4 hours
  script:
  - pwd
  - ls -l
  - source core_only/bin/activate
  - python -m dstauffman tests --library slog --coverage --cov_file $DCS_SHELL_DIR/.coverage.slog_core

no_numba_test:
  stage: Test
  needs: ["make_envs"]
  artifacts:
    paths:
    - $DCS_SHELL_DIR/.coverage.no_numba
    expire_in: 4 hours
  script:
  - pwd
  - ls -l
  - source static/bin/activate
  - python -m dstauffman tests --coverage --cov_file $DCS_SHELL_DIR/.coverage.no_numba

unit_test:
  stage: Test
  needs: ["make_envs"]
  artifacts:
    paths:
    - $DCS_SHELL_DIR/.coverage.full
    expire_in: 4 hours
  script:
  - pwd
  - ls -l
  - source everything/bin/activate
  - python -m dstauffman tests --coverage --cov_file $DCS_SHELL_DIR/.coverage.full

nubs_full_test:
  stage: Test
  needs: ["make_envs"]
  artifacts:
    paths:
    - $DCS_SHELL_DIR/.coverage.nubs_full
    expire_in: 4 hours
  script:
  - pwd
  - ls -l
  - source everything/bin/activate
  - python -m dstauffman tests --library nubs --coverage --cov_file $DCS_SHELL_DIR/.coverage.nubs_full

import_test:
  stage: Test
  needs: ["make_envs"]
  artifacts:
    paths:
    - $DCS_SHELL_DIR/.coverage.imports
    expire_in: 4 hours
  script:
  - pwd
  - ls -l
  - export COVERAGE_FILE=$DCS_SHELL_DIR/.coverage.imports
  - export COVERAGE_RCFILE=$CI_PROJECT_DIR/pyproject.toml
  - export PYTHONPATH=$CI_PROJECT_DIR:$PYTHONPATH
  - source core_only/bin/activate
  - coverage run $DCS_TESTS_DIR/test_commands_help.py
  - deactivate
  - source static/bin/activate
  - coverage run --append $DCS_TESTS_DIR/test_version.py
  - deactivate
  - source everything/bin/activate
  - coverage run --append $DCS_TESTS_DIR/test_version.py

basic_test:
  stage: Test
  needs: ["make_envs"]
  script:
  - pwd
  - ls -l
  - source core_only/bin/activate
  - python -m dstauffman tests -u

doc_test:
  stage: Test
  needs: ["make_envs"]
  script:
  - pwd
  - ls -l
  - source everything/bin/activate
  - python -m dstauffman tests -d

coverage_report:
  stage: Coverage
  needs: ["core_test", "nubs_test", "slog_test", "no_numba_test", "nubs_full_test", "unit_test", "import_test"]
  dependencies: ["core_test", "nubs_test", "slog_test", "no_numba_test", "nubs_full_test", "unit_test", "import_test"]
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    paths:
    - $DCS_SHELL_DIR/coverage_html_report/*
    expire_in: 1 week
    reports:
      coverage_report:
        coverage_format: cobertura
        path: $DCS_SHELL_DIR/coverage_html_report/coverage.xml
  script:
  - source static/bin/activate
  - cd $DCS_SHELL_DIR
  - pwd
  - ls -la
  - export COVERAGE_FILE=.coverage
  - coverage --version
  - coverage combine --keep
  - coverage html --rcfile $CI_PROJECT_DIR/pyproject.toml
  - coverage xml --rcfile $CI_PROJECT_DIR/pyproject.toml

build_code:
  stage: Deploy
  needs: ["core_test", "nubs_test", "slog_test", "no_numba_test", "nubs_full_test", "unit_test", "import_test"]
  allow_failure: true
  only:
  - tags
  except:
  - branches
  script:
  - source poetry/bin/activate
  - echo "Publishing to $CI_API_V4_URL/projects/$CI_PROJECT_ID/packages/pypi"
  - poetry --version
  - poetry build
  - poetry config repositories.github "$CI_API_V4_URL/projects/$CI_PROJECT_ID/packages/pypi"
  - poetry config http-basic.gitlab gitlab-ci-token "$CI_JOB_TOKEN"
  # Note: GitLab doesn't fully support poetry for publishing yet, use twine instead
  # - poetry publish --repository github
  - TWINE_PASSWORD=${CI_JOB_TOKEN} TWINE_USERNAME=gitlab-ci-token python -m twine upload --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi dist/*
