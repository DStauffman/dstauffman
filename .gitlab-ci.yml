image: python:latest

variables:
  DCS_TESTS_DIR: "$CI_PROJECT_DIR/dstauffman/tests"
  DCS_SHELL_DIR: "$CI_PROJECT_DIR/shell"
  QT_QPA_PLATFORM: "offscreen"
  CACHE_DIR: "$CI_PROJECT_DIR/.cache"
  UV_CACHE_DIR: "$CACHE_DIR/uv"
  PIP_CACHE_DIR: "$CACHE_DIR/pip"
  UV_LINK_MODE: "copy"

cache:
  paths:
  - $PIP_CACHE_DIR
  - $UV_CACHE_DIR
  - $CACHE_DIR/core_only
  - $CACHE_DIR/static
  - $CACHE_DIR/everything
  - $CACHE_DIR/setuptools

stages:
  - Environments
  - Static Analysis
  - Test
  - Coverage
  - Deploy

make_envs:
  stage: Environments
  script:
  - python3 --version
  - python3 -m pip config set global.index-url https://$EFOSS_USERNAME:$EFOSS_TOKEN@nexus.global.lmco.com/repository/pypi-proxy/simple/
  - python3 -m pip install --upgrade pip
  - python3 -m pip install --upgrade uv
  - uv --version
  - uv venv --allow-existing $CACHE_DIR/core_only
  - source $CACHE_DIR/core_only/bin/activate
  - uv pip install pytest-cov
  - deactivate
  - uv venv --allow-existing $CACHE_DIR/static
  - source $CACHE_DIR/static/bin/activate
  - uv pip install black flake8 h5py isort matplotlib mypy numpy pandas pyarrow pylint pylint-exit PyQt5 PyQt5-Stubs pytest-cov qtpy scipy tblib
  - deactivate
  - uv venv --allow-existing $CACHE_DIR/everything
  - source $CACHE_DIR/everything/bin/activate
  - uv pip install dask[dataframe] datashader h5py matplotlib mypy numba numpy pandas pyarrow PyQt5 pytest-cov qtpy scipy tblib
  - deactivate
  - uv venv --allow-existing $CACHE_DIR/setuptools
  - source $CACHE_DIR/setuptools/bin/activate
  - uv pip install build twine
  - deactivate
  - uv cache prune --ci

mypy:
  stage: Static Analysis
  allow_failure: true
  script:
  - pwd
  - ls -l
  - source $CACHE_DIR/static/bin/activate
  - python --version
  - mypy --version
  - mypy

flake8:
  stage: Static Analysis
  allow_failure: true
  script:
  - pwd
  - ls -l
  - source $CACHE_DIR/static/bin/activate
  - python --version
  - flake8 --version
  - flake8 .

pylint:
  stage: Static Analysis
  allow_failure: true
  script:
  - pwd
  - ls -l
  - source $CACHE_DIR/static/bin/activate
  - python --version
  - pylint --version
  - pylint dstauffman || pylint-exit $?
  - pylint nubs || pylint-exit $?
  - pylint slog || pylint-exit $?
  - pylint scripts || pylint-exit $?

black:
  stage: Static Analysis
  allow_failure: true
  script:
  - pwd
  - ls -l
  - source $CACHE_DIR/static/bin/activate
  - python --version
  - black --version
  - black . --check

isort:
  stage: Static Analysis
  allow_failure: true
  script:
  - pwd
  - ls -l
  - source $CACHE_DIR/static/bin/activate
  - python --version
  - isort --version
  - isort . --diff --skip .cache

core_test:
  stage: Test
  needs: ["make_envs"]
  artifacts:
    paths:
    - $DCS_SHELL_DIR/.coverage.core
    expire_in: 4 hours
  script:
  - pwd
  - ls -l
  - source $CACHE_DIR/core_only/bin/activate
  - python -m dstauffman tests --coverage --cov_file $DCS_SHELL_DIR/.coverage.core

nubs_test:
  stage: Test
  needs: ["make_envs"]
  artifacts:
    paths:
    - $DCS_SHELL_DIR/.coverage.nubs_core
    expire_in: 4 hours
  script:
  - pwd
  - ls -l
  - source $CACHE_DIR/core_only/bin/activate
  - python -m dstauffman tests --library nubs --coverage --cov_file $DCS_SHELL_DIR/.coverage.nubs_core

slog_test:
  stage: Test
  needs: ["make_envs"]
  artifacts:
    paths:
    - $DCS_SHELL_DIR/.coverage.slog_core
    expire_in: 4 hours
  script:
  - pwd
  - ls -l
  - source $CACHE_DIR/core_only/bin/activate
  - python -m dstauffman tests --library slog --coverage --cov_file $DCS_SHELL_DIR/.coverage.slog_core

no_numba_test:
  stage: Test
  needs: ["make_envs"]
  artifacts:
    paths:
    - $DCS_SHELL_DIR/.coverage.no_numba
    expire_in: 4 hours
  script:
  - pwd
  - ls -l
  - source $CACHE_DIR/static/bin/activate
  - python -m dstauffman tests --coverage --cov_file $DCS_SHELL_DIR/.coverage.no_numba

unit_test:
  stage: Test
  needs: ["make_envs"]
  artifacts:
    paths:
    - $DCS_SHELL_DIR/.coverage.full
    expire_in: 4 hours
  script:
  - pwd
  - ls -l
  - source $CACHE_DIR/everything/bin/activate
  - python -m dstauffman tests --coverage --cov_file $DCS_SHELL_DIR/.coverage.full

nubs_full_test:
  stage: Test
  needs: ["make_envs"]
  artifacts:
    paths:
    - $DCS_SHELL_DIR/.coverage.nubs_full
    expire_in: 4 hours
  script:
  - pwd
  - ls -l
  - source $CACHE_DIR/everything/bin/activate
  - python -m dstauffman tests --library nubs --coverage --cov_file $DCS_SHELL_DIR/.coverage.nubs_full

import_test:
  stage: Test
  needs: ["make_envs"]
  artifacts:
    paths:
    - $DCS_SHELL_DIR/.coverage.imports
    expire_in: 4 hours
  script:
  - pwd
  - ls -l
  - export COVERAGE_FILE=$DCS_SHELL_DIR/.coverage.imports
  - export COVERAGE_RCFILE=$CI_PROJECT_DIR/pyproject.toml
  - export PYTHONPATH=$CI_PROJECT_DIR:$PYTHONPATH
  - source $CACHE_DIR/core_only/bin/activate
  - coverage run $DCS_TESTS_DIR/test_commands_help.py
  - deactivate
  - source $CACHE_DIR/static/bin/activate
  - coverage run --append $DCS_TESTS_DIR/test_version.py
  - deactivate
  - source $CACHE_DIR/everything/bin/activate
  - coverage run --append $DCS_TESTS_DIR/test_version.py

basic_test:
  stage: Test
  needs: ["make_envs"]
  script:
  - pwd
  - ls -l
  - source $CACHE_DIR/core_only/bin/activate
  - python -m dstauffman tests -u

doc_test:
  stage: Test
  needs: ["make_envs"]
  script:
  - pwd
  - ls -l
  - source $CACHE_DIR/everything/bin/activate
  - python -m dstauffman tests -d

coverage_report:
  stage: Coverage
  needs: ["core_test", "nubs_test", "slog_test", "no_numba_test", "nubs_full_test", "unit_test", "import_test"]
  dependencies: ["core_test", "nubs_test", "slog_test", "no_numba_test", "nubs_full_test", "unit_test", "import_test"]
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    paths:
    - $DCS_SHELL_DIR/coverage_html_report/*
    expire_in: 1 week
    reports:
      coverage_report:
        coverage_format: cobertura
        path: $DCS_SHELL_DIR/coverage_html_report/coverage.xml
  script:
  - source $CACHE_DIR/static/bin/activate
  - cd $DCS_SHELL_DIR
  - pwd
  - ls -la
  - export COVERAGE_FILE=.coverage
  - coverage --version
  - coverage combine --keep
  - coverage html --rcfile $CI_PROJECT_DIR/pyproject.toml
  - coverage xml --rcfile $CI_PROJECT_DIR/pyproject.toml

build_code:
  stage: Deploy
  needs: ["core_test", "nubs_test", "slog_test", "no_numba_test", "nubs_full_test", "unit_test", "import_test"]
  allow_failure: true
  only:
  - tags
  except:
  - branches
  script:
  - source $CACHE_DIR/setuptools/bin/activate
  - echo "Publishing to $CI_API_V4_URL/projects/$CI_PROJECT_ID/packages/pypi"
  - python -m build
  - TWINE_PASSWORD=${CI_JOB_TOKEN} TWINE_USERNAME=gitlab-ci-token python -m twine upload --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi dist/*
